{"name":"Holdup","tagline":"Wrangle CommonJS Promises.","body":"```\r\n /$$                 /$$       /$$\r\n| $$                | $$      | $$\r\n| $$$$$$$   /$$$$$$ | $$  /$$$$$$$ /$$   /$$  /$$$$$$\r\n| $$__  $$ /$$__  $$| $$ /$$__  $$| $$  | $$ /$$__  $$\r\n| $$  \\ $$| $$  \\ $$| $$| $$  | $$| $$  | $$| $$  \\ $$\r\n| $$  | $$| $$  | $$| $$| $$  | $$| $$  | $$| $$  | $$\r\n| $$  | $$|  $$$$$$/| $$|  $$$$$$$|  $$$$$$/| $$$$$$$/\r\n|__/  |__/ \\______/ |__/ \\_______/ \\______/ | $$____/\r\n                                            | $$\r\n                                            | $$\r\n                                            |__/\r\n```\r\n\r\n\r\nHoldup is a tiny but full-featured flow-control library that makes working with\r\npromises or callbacks in Javascript easy. With Holdup you define the\r\ndependencies of your functions and it executes them for you with maximal\r\nconcurrency: you don't have to explicitly state whether they're parallel or\r\nserial, or what order each one should run in. It just works.\r\n\r\nHoldup runs in Node, Component-spec environments, and ordinary browsers; it has\r\nno dependencies and is extensively unit-tested. It works with any CommonJS\r\nPromises/A or Promises/A+ compliant promise implementation; it also provides\r\nits own Promises/A+ compliant promise implementation. It clocks in at less than\r\n1.8k minified and gzipped.\r\n\r\n\r\nExamples\r\n================================================================================\r\n\r\nHere's an example of how to define a task that depends on three other\r\nNode-style async functions:\r\n\r\n```javascript\r\nvar taskA = holdup.wrap(nodeFn);\r\nvar taskB = holdup.wrap(otherNodeFn);\r\nvar taskC = holdup.wrap(finalNodeFn, arg1, arg2);\r\n\r\nholdup.all(taskA, taskB, taskC).then(function() {\r\n  // do work\r\n}, function() {\r\n  // handle errors\r\n});\r\n```\r\n\r\nIn this case, `taskA`, `taskB`, and `taskC` will all immediately execute in\r\nparallel, and the work will wait until all three finish successfully. If any of\r\nthe dependencies fail, the error callback will be called. All of the tasks are\r\nthemselves just Promises/A+ compliant promises, so they can be used with any\r\nlibrary that works with Promises/A or Promises/A+.\r\n\r\nThat was a simple example, though: do some work in parallel, and when it\r\nfinishes do some other work. What if we have multiple dependencies on separate\r\nparallel workloads? Holdup handles that well too:\r\n\r\n```javascript\r\nvar taskA = holdup.wrap(fnA);\r\nvar taskB = holdup.wrap(fnB);\r\n\r\nvar taskC = holdup.all(taskA, taskB).then(function() {\r\n  return holdup.wrap(fnC);\r\n});\r\n\r\nvar taskD = holdup.all(taskA).then(function() { return holdup.wrap(fnD); });\r\n\r\nvar taskE = holdup.all(taskC, taskD).then(function() {\r\n  return holdup.wrap(fnE);\r\n});\r\n```\r\n\r\nIn the above, `taskE` depends both on `taskC` and `taskD`. `taskD` depends on\r\n`taskA`, as does `taskC` -- but `taskC` has an additional dependency on\r\n`taskB`. This might be a pain to hand-optimize with raw callbacks, but since\r\nyou just have to specify dependencies you can let Holdup take care of the work\r\nfor you.\r\n\r\nHoldup understands more than success, though. Sometimes, things break; it's\r\nstill important to handle those failures. It might also be important to take\r\ncertain actions if *enough* things break, or if specific combinations of things\r\nbreak. With Holdup, it's easy to define those relationships:\r\n\r\n```javascript\r\nvar taskA = holdup.wrap(fnA),\r\n    taskB = holdup.wrap(fnB),\r\n    taskC = holdup.wrap(fnC),\r\n    taskD = holdup.all(taskA, taskB),\r\n    taskE = holdup.none(taskC, taskD);\r\n\r\ntaskE.then(function() {\r\n  // only gets called when taskC and taskD both error out\r\n}, function() {\r\n  // gets called if either taskC or taskD pass, or if they both do\r\n});\r\n```\r\n\r\nSimilarly, Holdup has a `resolved` function that fulfills once everything has\r\nresolved -- even if everything resolved to an error state, or if some resolved\r\none way and others resolved another. It passes the fulfilled and rejected\r\npromises in separate arrays to the `then` callback, as so:\r\n\r\n```javascript\r\nvar taskA = holdup.wrap(fnA),\r\n    taskB = holdup.wrap(fnB),\r\n    taskC = holdup.wrap(fnC),\r\n    taskD = holdup.resolved(taskA, taskB, taskC);\r\n\r\ntaskD.then(function(fulfilled, rejected) {\r\n  // this is called once taskA, taskB, and taskC are no longer in pending\r\n  // states.\r\n  // fulfilled is an array of which tasks have fulfilled, and rejected is an\r\n  // array of which tasks have rejected.\r\n});\r\n```\r\n\r\nThe `all`, `none`, and `resolved` functions form the basis of Holdup's API, but\r\nthey're not the only ones available. Holdup provides a full-featured functional\r\nAPI for working with promises, wrapping Node-style functions, and easily making\r\nyour own promises. Keep reading for the full API documentation.\r\n\r\n\r\nAPI\r\n================================================================================\r\n\r\nManipulating Promises\r\n--------------------------------------------------------------------------------\r\n\r\n##### holdup.make(callback)\r\n\r\nGiven a callback of form `function(fulfill, reject) {}`, returns a promise that\r\nwill be fulfilled when the callback calls `fulfill` or rejected when the\r\npromise calls `reject`.\r\n\r\nThe returned promise will call its `then` callback with whatever is passed to\r\nthe `fulfill` callback, and will call its `then` errback with whatever is\r\npassed to the `reject` errback.\r\n\r\n\r\n##### holdup.all(promises...)\r\n\r\nTakes an arg list, array, array of arrays, arg lists of arrays... etc\r\ncontaining promises.\r\n\r\nReturns a promise that will be fulfilled if all the promises fulfill, and will\r\nreject as soon as any of the promises reject.\r\n\r\nIt will call its `then` callback with the array of all fulfilled promises, in\r\nthe order that they fulfilled. It will call its `then` errback with the first\r\npromise to reject.\r\n\r\n\r\n##### holdup.none(promises...)\r\n\r\nTakes an arg list, array, array of arrays, arg list of arrays... etc containing\r\npromises.\r\n\r\nReturns a promise that will be fulfilled if all of the promises reject, and\r\nwill reject as soon as any of the promises fulfill.\r\n\r\nThe returned promise will call its `then` callback with the array of all\r\nrejected promises, in the order that they rejected. It will call its `then`\r\nerrback with the first promise to fulfill.\r\n\r\n\r\n##### holdup.resolved(promises...)\r\n\r\nTakes an arg list, array, array of arrays, arg list of arrays... etc containing\r\npromises.\r\n\r\nReturns a promise that will be fulfilled once all of the given promises are no\r\nlonger in a pending state; i.e., once they've each been rejected or fulfilled.\r\nThe promises don't have to end in the same state: they only have to leave the\r\npending state.\r\n\r\nThe returned promise will call its `then` callback with two arguments: the\r\nfirst is an array of all fulfilled promises in the order that they fulfilled,\r\nand the second is an array of all rejected promises in the order that they\r\nrejected. If no promises fulfilled, the first argument will be an empty array;\r\nif no promises rejected, the first argument will similarly be an empty list.\r\n\r\n\r\n##### holdup.firstFulfilled(promises...)\r\n\r\nTakes an arg list, array, array of arrays, arg list of arrays... etc containing\r\npromises.\r\n\r\nReturns a promise that will be fulfilled as soon as the first of the given\r\npromises fulfills, and will reject if none of the promises fulfill.\r\n\r\nThe returned promise will call its `then` callback with the first fulfilled\r\npromise, and will call its `then` errback with the array of all rejected\r\npromises in the order that they rejected.\r\n\r\n\r\n##### holdup.firstRejected(promises...)\r\n\r\nTakes an arg list, array, array of arrays, arg list of arrays... etc containing\r\npromises.\r\n\r\nReturns a promise that will be fulfilled as soon as the first of the given\r\npromises rejects, and will reject if none of the promises reject.\r\n\r\nThe returned promise will call its `then` callback with the first rejected\r\npromise, and will call its `then` errback with the array of all fulfilled\r\npromises in the order that they fulfilled.\r\n\r\n\r\n##### holdup.lastFulfilled(promises...)\r\n\r\nTakes an arg list, array, array of arrays, arg list of arrays... etc containing\r\npromises.\r\n\r\nReturns a promise that will be fulfilled once all of the promises have left\r\ntheir pending state, and at least one has fulfilled. It will reject if all\r\ngiven promises reject.\r\n\r\nThe returned promise will call its `then` callback with the last fulfilled\r\npromise, and will call its `then` errback with the array of all rejected\r\npromises in the order that they rejected.\r\n\r\n\r\n##### holdup.lastRejected(promises...)\r\n\r\nTakes an arg list, array, array of arrays, arg list of arrays... etc containing\r\npromises.\r\n\r\nReturns a promise that will be fulfilled once all of the promises have left\r\ntheir pending state, and at least one has rejected. It will reject if all given\r\npromises fulfill.\r\n\r\nThe returned promise will call its `then` callback with the first rejected\r\npromise, and will call its `then` errback with the array of all fulfilled\r\npromises in the order that they fulfilled.\r\n\r\n\r\n##### holdup.invert(promise)\r\n\r\nGiven a promise, returns a promise that will reject when the given promise\r\nfulfills and will fulfill when the given promise rejects.\r\n\r\nIf data is passed to the callback of the given promise, it will be passed as\r\nthe error to the returned promise's errback. If an error is passed to the\r\nerrback of the given promise, it will be passed as the data to the returned\r\npromises callback.\r\n\r\n\r\n\r\nWorking With Values\r\n--------------------------------------------------------------------------------\r\n\r\n##### holdup.data(promises..., callback)\r\n\r\nTakes a list of promises (in array or arg list form) containing promises, and a\r\ncallback function.\r\n\r\nCalls the callback function with the data from the promises' `then` callbacks,\r\nordered according to the promises' ordering in the arguments.\r\n\r\nFor example:\r\n\r\n```javascript\r\nholdup.data(a, b, c, function(aData, bData, cData) {\r\n  // do things with the data from a, b, and c\r\n});\r\n```\r\n\r\nThe callback will only be called once all promises have resolved. If promises\r\nare resolved in a rejected state, their corresponding data will be passed in as\r\n`undefined`.\r\n\r\n\r\n##### holdup.errors(promises..., callback)\r\n\r\nTakes a list of promises (in array or arg list form) containing promises, and a\r\ncallback function.\r\n\r\nCalls the callback function with the errors from the promises' `then` errbacks,\r\nordered according to the promises' ordering in the arguments.\r\n\r\nFor example:\r\n\r\n```javascript\r\nholdup.errors(a, b, c, function(aError, bError, cError) {\r\n  // do things with the errors from a, b, and c\r\n});\r\n```\r\n\r\nThe callback will only be called once all promises have resolved. If promises\r\nare resolved in a fulfilled state, their corresponding error will be passed in\r\nas `undefined`.\r\n\r\n\r\n\r\nTiming Functions\r\n--------------------------------------------------------------------------------\r\n\r\n##### holdup.wait(milliseconds)\r\n\r\nGiven a time in milliseconds, returns a promise that calls its `then` callback\r\nafter that amount of time. The returned promise will never call any errback\r\nfunctions given to it.\r\n\r\nThe returned promise will pass along the given timeout interval to the `then`\r\ncallback as its first parameter.\r\n\r\n\r\n##### holdup.delay(promise, milliseconds)\r\n\r\nGiven a promise and a time in milliseconds, returns a promise that fulfills\r\nwhen the given promise fulfills or rejects when the first one rejects, but\r\nwaits the given time before fulfilling or rejecting.\r\n\r\n\r\n##### holdup.timeout(promise, milliseconds)\r\n\r\nGiven a promise and a time in milliseconds, returns a promise that fulfills if\r\nthe given promise fulfills before the time is up and rejects otherwise.\r\n\r\n\r\n\r\nIntegrating With Node-style Callback APIs\r\n--------------------------------------------------------------------------------\r\n\r\n##### holdup.napply(scope, nodeFn, args)\r\n\r\nGiven a scope, a Node-style async function, and an array of arguments, returns\r\na promise that fulfills if the given function completes successfully and\r\nrejects if it doesn't.\r\n\r\nThe returned promise will call its `then` callback with anything passed as the\r\n`data` parameter to the async function (if anything is in fact passed), and\r\nwill call its `then` errback with anything passed as the `err` param to the\r\nasync function.\r\n\r\n\r\n##### holdup.nfapply(nodeFn, args)\r\n\r\nA convenient, scopeless version of `napply`, for times when it's acceptable\r\nthat the scope of `napply` be `null`.\r\n\r\n\r\n##### holdup.ncall(scope, nodeFn, args...)\r\n\r\nGiven a scope, a Node-style async function, and optional arguments, returns a\r\npromise that fulfills if the given function completes successfully and rejects\r\nif it doesn't.\r\n\r\nThe returned promise will call its `then` callback with anything passed as the\r\n`data` parameter to the async function (if anything is in fact passed), and\r\nwill call its `then` errback with anything passed as the `err` param to the\r\nasync function.\r\n\r\n\r\n##### holdup.nfcall\r\n\r\nA convenient, scopeless version of `ncall`, for times when it's acceptable that\r\nthe scope of `ncall` be `null`.\r\n\r\n\r\n##### holdup.npost(obj, methodName, args)\r\n\r\nGiven an object, a method name corresponding to a Node-style async function,\r\nand an array of arguments, returns a promise that fulfills if the given method\r\ncompletes successfully and rejects if it doesn't.\r\n\r\nThe returned promise will call its `then` callback with anything passed as the\r\n`data` parameter to the async function (if anything is in fact passed), and\r\nwill call its `then` errback with anything passed as the `err` param to the\r\nasync function.\r\n\r\n\r\n##### holdup.ninvoke(obj, methodName, args...)\r\n\r\nGiven an object, a method name corresponding to a Node-style async function,\r\nand an optional argument list of parameters, returns a promise that fulfills if\r\nthe given method completes successfully and rejects if it doesn't.\r\n\r\nThe returned promise will call its `then` callback with anything passed as the\r\n`data` parameter to the async function (if anything is in fact passed), and\r\nwill call its `then` errback with anything passed as the `err` param to the\r\nasync function.\r\n\r\n\r\n##### holdup.nbind(nodeFn, scope, args...)\r\n\r\nGiven a Node-style async function, a scope, and an optional argument list of\r\nparameters, returns a promise-returning function bound to the scope and the\r\ngiven parameters.\r\n\r\nThe returned promise will call its `then` callback with anything passed as the\r\n`data` parameter to the async function (if anything is in fact passed), and\r\nwill call its `then` errback with anything passed as the `err` param to the\r\nasync function.\r\n\r\nFor example:\r\n\r\n```javascript\r\nvar readProust = holdup.bind(fs.readFile, fs, 'proust.txt', 'utf-8');\r\nreadProust().then(function(text) {\r\n  // do things with text\r\n});\r\n```\r\n\r\n\r\n##### holdup.nfbind(nodeFn, args...)\r\n\r\nA convenient, scopeless version of nbind, for times when it's acceptable that\r\nthe scope of `nbind` be `null`.\r\n\r\n\r\n##### holdup.nodeify(promise, callback)\r\n\r\nGiven a promise and a Node-style callback, calls the callback with the correct\r\n`data` and `err` arguments when the promise fulfills or rejects.  Useful for\r\ncreating dual promise/callback APIs, or for using promises internally but\r\nexposing only a callback API.\r\n\r\n\r\n\r\nLicense\r\n================================================================================\r\n\r\nCopyright 2013-2014 Matt Baker. Licensed under the MIT License: see LICENSE.txt\r\nfor details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}